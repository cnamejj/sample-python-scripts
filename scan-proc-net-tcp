#!/usr/bin/env python
"""Show /proc/net/tcp lines that match the requested port"""

import sys
import socket
import binascii

# ---

MIN_DATA_FIELDS = 12
TARGET_PORT = 80

STATE_LIST = {
    "01": "ESTABLISHED",
    "02": "SYN_SENT",
    "03": "SYN_RECV",
    "04": "FIN_WAIT1",
    "05": "FIN_WAIT2",
    "06": "TIME_WAIT",
    "07": "CLOSE",
    "08": "CLOSE_WAIT",
    "09": "LACK_ACK",
    "0A": "LISTEN",
    "0B": "CLOSING"
}

# ---

def socket_parts(proc_conn=None):
    """Return the printable version if an IP and port"""

    if proc_conn == None:
        return None, None

    __hex_ip, __ignore, __hex_port = proc_conn.partition(":")

    __int_ip = int(__hex_ip, 16)
    __ordered_ip = '{0:08x}'.format(socket.htonl(__int_ip))
    __ip = socket.inet_ntop(socket.AF_INET, binascii.unhexlify(__ordered_ip))

    __port = int(__hex_port, 16)

    return __ip, __port

# ---

if len(sys.argv) > 1:

    try:
        TARGET_PORT = int(sys.argv[1])

    except ValueError:
        print "Err: Invalid port number {port}".format(port=sys.argv[0])
        sys.exit(1)

else:
    print "Info: No port given on command line, using '{port}'".format(
            port=TARGET_PORT)

# ---

CONN_LIST = open("/proc/net/tcp")

for CONN in CONN_LIST:
    CONN_DATA = CONN.split()

    # - If there aren't enough fields in the line, skip it
    if len(CONN_DATA) < MIN_DATA_FIELDS:
        continue

    # - If this is the header line (no data), skip it
    if CONN_DATA[0] == "sl":
        continue

    local_ip, local_port = socket_parts(CONN_DATA[1])
    remote_ip, remote_port = socket_parts(CONN_DATA[2])

    # - If neither the local or remote port match, skip the record
    if local_port != TARGET_PORT and remote_port != TARGET_PORT:
        continue

    # - Convert the hex "state" code to human readable format
    show_state = STATE_LIST[CONN_DATA[3]]

    print "{st} / {oip} {oport} / {dip} {dport}".format(
            oip=local_ip, oport=local_port, dip=remote_ip,
            dport=remote_port, st=show_state)
